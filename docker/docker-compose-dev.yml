version: '3.8'

services:
  db: # Database service
    image: docker.io/library/postgres:alpine # Use the official PostgreSQL image with Alpine Linux
    container_name: api_db # Assign a specific name to the container for easier identification
    ports:
      - 5400:5432 # Map port 5400 on the host to port 5432 inside the container (default PostgreSQL port)
    environment:
      - POSTGRES_USER=localenv # Set the default PostgreSQL user (can be overridden by environment variables)
      - POSTGRES_PASSWORD=localenv # Set the password for the default user (can be overridden)
      - POSTGRES_DB=localenv # Set the default database name (can be overridden)
    volumes:
      - apidata:/var/lib/postgresql/data # Mount a named volume 'apidata' to persist database files outside the container

  jaeger: # Jaeger tracing backend service
    image: cr.jaegertracing.io/jaegertracing/jaeger:2.8.0  
    # image: jaegertracing/all-in-one:1.58 # Alternative: Use a specific version like '1.58'
    restart: unless-stopped # Always restart the container unless it's explicitly stopped
    environment:
      # Optional: Configure sampling rate (0.0 - 1.0, 1.0 = 100%)
      - "COLLECTOR_OTLP_ENABLED=true" # Enable the OpenTelemetry Protocol (OTLP) receiver (recommended for OpenTelemetry)
      # - "QUERY_BASE_PATH=/jaeger" # Optional: Change the base path for the Jaeger UI
    ports:
      # Port for the agent (receives traces via UDP, legacy protocols)
      - "5775:5775/udp"
      # Port for the HTTP collector (legacy)
      - "14268:14268" # This is the endpoint used in the Go code: http://localhost:14268/api/traces
      # Port for the gRPC collector (legacy)
      - "14250:14250"
      # Port for the Jaeger UI
      - "16686:16686"
      # Port for the Zipkin protocol (if used)
      - "9411:9411"

volumes:
  apidata: {} # Define the named volume 'apidata' used by the 'db' service